// This file is auto-generated by @hey-api/openapi-ts

/**
 * Error response
 */
export type ErrorDto = {
    message: string;
};

/**
 * Login with email and password
 */
export type LoginInputDto = {
    email: string;
    password: string;
    source?: 'mobile' | 'web';
};

export type source = 'mobile' | 'web';

/**
 * Login with email and password
 */
export type LoginOutputDto = {
    message: string;
    redirect?: string;
    accessToken: string;
};

export type InititatePasswordResetInputDto = {
    email: string;
};

export type GenericMessageDto = {
    message: string;
};

export type CompletePasswordResetInputDto = {
    token: string;
    password: string;
};

export type CompleteUserOnboardingInputDto = {
    token: string;
    password: string;
};

export type LinkOAuthAccountInputDto = {
    token: string;
};

/**
 * Paginate user records
 */
export type ReadManyUserOutputDto = {
    page?: unknown;
    recordsPerPage?: unknown;
    totalRecords: number;
    records: Array<{
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        phone: string;
        active: boolean;
        address: string;
        addressLatitude: number;
        addressLongitude: number;
        createdAt: string;
    }>;
};

/**
 * The record for the current user along with other app context
 */
export type ReadUserMeOutputDto = {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLatitude: number;
    addressLongitude: number;
    createdAt: string;
    searchApiKey: string;
    searchApiUrl: string;
    outageInboundEmailAddress: string;
    features: Array<(string)>;
};

/**
 * An existing user record
 */
export type ReadUserOutputDto = {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLatitude: number;
    addressLongitude: number;
    createdAt: string;
};

/**
 * Input to create or update a user record
 */
export type CreateUserInputDto = {
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLatitude: number;
    addressLongitude: number;
};

/**
 * An existing user record
 */
export type CreateUserOutputDto = {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLatitude: number;
    addressLongitude: number;
    createdAt: string;
};

/**
 * Input to create or update a user record
 */
export type UpdateUserInputDto = {
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLatitude: number;
    addressLongitude: number;
};

/**
 * An existing user record
 */
export type UpdateUserOutputDto = {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLatitude: number;
    addressLongitude: number;
    createdAt: string;
};

/**
 * An existing user record
 */
export type DeleteUserOutputDto = {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLatitude: number;
    addressLongitude: number;
    createdAt: string;
};

/**
 * Paginate Site records
 */
export type SiteOutputManyDto = {
    page?: unknown;
    recordsPerPage?: unknown;
    totalRecords: number;
    records: Array<{
        id: string;
        code: string;
        name: string;
        longitude: number;
        latitude: number;
        tags: Array<{
            id: string;
            name: string;
            description: string;
            color: string;
            createdAt: string;
            updatedAt: string;
        }>;
        createdAt: string;
    }>;
};

/**
 * Site record
 */
export type SiteOutputDto = {
    id: string;
    code: string;
    name: string;
    longitude: number;
    latitude: number;
    tags: Array<{
        id: string;
        name: string;
        description: string;
        color: string;
        createdAt: string;
        updatedAt: string;
    }>;
    createdAt: string;
};

/**
 * A route for a vehicle to follow between sites
 */
export type ReadRouteOutputDto = {
    id: string;
    name: string;
    distance: number;
    duration: number;
    returnDistance: number;
    returnDuration: number;
    assignee: {
        id: string;
        firstName: string;
        lastName: string;
        email: string;
        address: string;
        addressLongitude: number;
        addressLatitude: number;
    } | null;
    loop: boolean;
    stops: Array<{
        id: string;
        distance: number;
        duration: number;
        siteId: string | null;
        site: {
            id: string;
            code: string;
            latitude: number;
            longitude: number;
        } | null;
        label: string;
        latitude: number;
        longitude: number;
    }>;
    createdAt: string;
};

/**
 * Outage record
 */
export type OutageOutputDto = {
    id: string;
    externalId: string | null;
    planned: boolean;
    plannedStart: string;
    plannedEnd: string;
    actualStart: string | null;
    actualEnd: string | null;
    estimatedEnd: string | null;
    status: 'DRAFT' | 'APPROVED' | 'REJECTED';
    reason: string;
    physicalAddress: string;
    icp: string;
    createdAt: string;
    siteId: string | null;
    site: {
        id: string;
        code: string;
        name: string;
        longitude: number;
        latitude: number;
        createdAt: string;
    } | null;
    emailSource: {
        id: string;
        externalId: string;
        to: string;
        from: string;
        subject: string;
        textBody: string;
        htmlBody: string;
        sentAt: string;
        createdAt: string;
    } | null;
    emailId: string | null;
};

export type status = 'DRAFT' | 'APPROVED' | 'REJECTED';

/**
 * Site record
 */
export type SiteInputDto = {
    code: string;
    name: string;
    longitude: number;
    latitude: number;
    tags: Array<(string)>;
};

/**
 * Outage record
 */
export type OutageInputDto = {
    externalId: string | null;
    planned: boolean;
    plannedStart: string;
    plannedEnd: string;
    actualStart: string | null;
    actualEnd: string | null;
    estimatedEnd: string | null;
    status: 'DRAFT' | 'APPROVED' | 'REJECTED';
    reason: string;
    physicalAddress: string;
    icp: string;
    siteId: string | null;
    emailId: string | null;
};

/**
 * Paginate Outage records
 */
export type OutageOutputManyDto = {
    page?: unknown;
    recordsPerPage?: unknown;
    totalRecords: number;
    records: Array<{
        id: string;
        externalId: string | null;
        planned: boolean;
        plannedStart: string;
        plannedEnd: string;
        actualStart: string | null;
        actualEnd: string | null;
        estimatedEnd: string | null;
        status: 'DRAFT' | 'APPROVED' | 'REJECTED';
        reason: string;
        physicalAddress: string;
        icp: string;
        createdAt: string;
        siteId: string | null;
        site: {
            id: string;
            code: string;
            name: string;
            longitude: number;
            latitude: number;
            createdAt: string;
        } | null;
        emailSource: {
            id: string;
            externalId: string;
            to: string;
            from: string;
            subject: string;
            textBody: string;
            htmlBody: string;
            sentAt: string;
            createdAt: string;
        } | null;
        emailId: string | null;
    }>;
};

/**
 * Outage Summary record
 */
export type OutageSummaryOutputDto = {
    draft: number;
    approved: number;
    rejected: number;
    upcoming24Hours: number;
    upcoming7Days: number;
    emails60Days: number;
};

/**
 * Public Outage record
 */
export type EmailWebhookOutputDto = {
    message: string;
};

/**
 * Public Outage record
 */
export type EmailWebhookInputDto = {
    FromName: string;
    MessageStream: string;
    From: string;
    FromFull: {
        Email: string;
        Name: string;
        MailboxHash: string;
    };
    To: string;
    ToFull: Array<{
        Email: string;
        Name: string;
        MailboxHash: string;
    }>;
    Cc: string;
    CcFull: Array<{
        Email: string;
        Name: string;
        MailboxHash: string;
    }>;
    Bcc: string;
    BccFull: Array<{
        Email: string;
        Name: string;
        MailboxHash: string;
    }>;
    OriginalRecipient: string;
    Subject: string;
    MessageID: string;
    ReplyTo: string;
    MailboxHash: string;
    Date: string;
    TextBody: string;
    HtmlBody: string;
    StrippedTextReply: string;
    Tag: string;
    Headers: Array<{
        Name: string;
        Value: string;
    }>;
    Attachments: Array<{
        Name: string;
        Content: string;
        ContentType: string;
        ContentLength: number;
    }>;
};

export type NoteInputDto = {
    text: string;
    userId: string;
};

export type NoteOutputDto = {
    id: string;
    text: string;
    user: {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        phone: string;
        active: boolean;
        address: string;
        addressLatitude: number;
        addressLongitude: number;
        createdAt: string;
    };
    userId: string;
    createdAt: string;
    updatedAt: string;
};

/**
 * Paginate route records
 */
export type ReadManyRouteOutputDto = {
    page?: unknown;
    recordsPerPage?: unknown;
    totalRecords: number;
    records: Array<{
        id: string;
        name: string;
        distance: number;
        duration: number;
        returnDistance: number;
        returnDuration: number;
        assignee: {
            id: string;
            firstName: string;
            lastName: string;
            email: string;
            address: string;
            addressLongitude: number;
            addressLatitude: number;
        } | null;
        loop: boolean;
        stops: Array<{
            id: string;
            distance: number;
            duration: number;
            siteId: string | null;
            site: {
                id: string;
                code: string;
                latitude: number;
                longitude: number;
            } | null;
            label: string;
            latitude: number;
            longitude: number;
        }>;
        createdAt: string;
    }>;
};

export type CreateRouteInputDto = {
    name: string;
    distance: number;
    duration: number;
    returnDistance: number;
    returnDuration: number;
    assignee: {
    id: 'null' | null;
    firstName: string;
    lastName: string;
    email: string;
    address: string;
    addressLongitude: number;
    addressLatitude: number;
} | {
    id: string;
} | null;
    loop: boolean;
    stops: Array<{
        id: string;
        distance: number;
        duration: number;
        siteId: string | null;
        label: string;
        latitude: number;
        longitude: number;
    }>;
};

export type id = 'null';

export type CreateRouteOutputDto = {
    id: string;
    name: string;
    distance: number;
    duration: number;
    returnDistance: number;
    returnDuration: number;
    assignee: {
        id: string;
        firstName: string;
        lastName: string;
        email: string;
        address: string;
        addressLongitude: number;
        addressLatitude: number;
    } | null;
    loop: boolean;
    stops: Array<{
        id: string;
        distance: number;
        duration: number;
        siteId: string | null;
        label: string;
        latitude: number;
        longitude: number;
    }>;
    createdAt: string;
};

export type UpdateRouteInputDto = {
    id: string;
    name: string;
    distance: number;
    duration: number;
    returnDistance: number;
    returnDuration: number;
    assignee: {
    id: 'null' | null;
    firstName: string;
    lastName: string;
    email: string;
    address: string;
    addressLongitude: number;
    addressLatitude: number;
} | {
    id: string;
} | null;
    loop: boolean;
    stops: Array<{
        id: string;
        distance: number;
        duration: number;
        siteId: string | null;
        label: string;
        latitude: number;
        longitude: number;
    }>;
};

/**
 * A route for a vehicle to follow between sites
 */
export type UpdateRouteOutputDto = {
    id: string;
    name: string;
    distance: number;
    duration: number;
    returnDistance: number;
    returnDuration: number;
    assignee: {
        id: string;
        firstName: string;
        lastName: string;
        email: string;
        address: string;
        addressLongitude: number;
        addressLatitude: number;
    } | null;
    loop: boolean;
    stops: Array<{
        id: string;
        distance: number;
        duration: number;
        siteId: string | null;
        site: {
            id: string;
            code: string;
            latitude: number;
            longitude: number;
        } | null;
        label: string;
        latitude: number;
        longitude: number;
    }>;
    createdAt: string;
};

/**
 * A route for a vehicle to follow between sites
 */
export type DeleteRouteOutputDto = {
    id: string;
    name: string;
    distance: number;
    duration: number;
    returnDistance: number;
    returnDuration: number;
    assignee: {
        id: string;
        firstName: string;
        lastName: string;
        email: string;
        address: string;
        addressLongitude: number;
        addressLatitude: number;
    } | null;
    loop: boolean;
    stops: Array<{
        id: string;
        distance: number;
        duration: number;
        siteId: string | null;
        site: {
            id: string;
            code: string;
            latitude: number;
            longitude: number;
        } | null;
        label: string;
        latitude: number;
        longitude: number;
    }>;
    createdAt: string;
};

/**
 * Paginate Asset records
 */
export type AssetOutputManyDto = {
    page?: unknown;
    recordsPerPage?: unknown;
    totalRecords: number;
    records: Array<{
        id: string;
        name: string;
        ip: string | null;
        port: number | null;
        password: string;
        active: boolean;
        siteId: string;
        site: {
            id: string;
            code: string;
            name: string;
            longitude: number;
            latitude: number;
            createdAt: string;
        };
        createdAt: string;
    }>;
};

/**
 * Asset record
 */
export type AssetOutputDto = {
    id: string;
    name: string;
    ip: string | null;
    port: number | null;
    password: string;
    active: boolean;
    siteId: string;
    site: {
        id: string;
        code: string;
        name: string;
        longitude: number;
        latitude: number;
        createdAt: string;
    };
    createdAt: string;
};

/**
 * Asset record
 */
export type AssetInputDto = {
    name: string;
    ip: string | null;
    port: number | null;
    password: string;
    active: boolean;
    siteId: string;
};

/**
 * Paginate map records
 */
export type ReadManyMapOutputDto = {
    page?: unknown;
    recordsPerPage?: unknown;
    totalRecords: number;
    records: Array<{
        id: string;
        name: string;
        styleLight: string;
        styleDark: string;
        createdAt: string;
    }>;
};

/**
 * A physical resource that belong to a site, for example cameras, servers, or power systems.
 */
export type ReadMapOutputDto = {
    id: string;
    name: string;
    styleLight: string;
    styleDark: string;
    createdAt: string;
};

/**
 * A physical resource that belong to a site, for example cameras, servers, or power systems.
 */
export type CreateMapInputDto = {
    name: string;
    styleLight: string;
    styleDark: string;
};

/**
 * A physical resource that belong to a site, for example cameras, servers, or power systems.
 */
export type CreateMapOutputDto = {
    id: string;
    name: string;
    styleLight: string;
    styleDark: string;
    createdAt: string;
};

/**
 * A physical resource that belong to a site, for example cameras, servers, or power systems.
 */
export type UpdateMapInputDto = {
    name: string;
    styleLight: string;
    styleDark: string;
};

/**
 * A physical resource that belong to a site, for example cameras, servers, or power systems.
 */
export type UpdateMapOutputDto = {
    id: string;
    name: string;
    styleLight: string;
    styleDark: string;
    createdAt: string;
};

/**
 * A physical resource that belong to a site, for example cameras, servers, or power systems.
 */
export type DeleteMapOutputDto = {
    id: string;
    name: string;
    styleLight: string;
    styleDark: string;
    createdAt: string;
};

/**
 * Paginate Alarm records
 */
export type AlarmOutputManyDto = {
    page?: unknown;
    recordsPerPage?: unknown;
    totalRecords: number;
    records: Array<{
        id: string;
        name: string;
        description: string;
        severity: number;
        onAt: string;
        offAt: string | null;
        assetId: string;
        asset: {
            id: string;
            name: string;
            ip: string | null;
            port: number | null;
            password: string;
            active: boolean;
            siteId: string;
            createdAt: string;
        };
        createdAt: string;
    }>;
};

/**
 * Alarm record
 */
export type AlarmOutputDto = {
    id: string;
    name: string;
    description: string;
    severity: number;
    onAt: string;
    offAt: string | null;
    assetId: string;
    asset: {
        id: string;
        name: string;
        ip: string | null;
        port: number | null;
        password: string;
        active: boolean;
        siteId: string;
        createdAt: string;
    };
    createdAt: string;
};

/**
 * Alarm record
 */
export type AlarmInputDto = {
    name: string;
    description: string;
    severity: number;
    onAt: string;
    offAt: string | null;
    assetId: string;
};

/**
 * Paginate Tag records
 */
export type TagOutputManyDto = {
    page?: unknown;
    recordsPerPage?: unknown;
    totalRecords: number;
    records: Array<{
        id: string;
        name: string;
        description: string;
        color: string;
        createdAt: string;
        updatedAt: string;
    }>;
};

/**
 * Tag record
 */
export type TagOutputDto = {
    id: string;
    name: string;
    description: string;
    color: string;
    createdAt: string;
    updatedAt: string;
};

/**
 * Tag record
 */
export type TagInputDto = {
    name: string;
    description: string;
    color: string;
};

export type HealthControllerCheckResponse = {
    status?: string;
    info?: {
        [key: string]: {
            status: string;
            [key: string]: unknown | string;
        };
    } | null;
    error?: {
        [key: string]: {
            status: string;
            [key: string]: unknown | string;
        };
    } | null;
    details?: {
        [key: string]: {
            status: string;
            [key: string]: unknown | string;
        };
    };
};

export type LoginData = {
    requestBody: LoginInputDto;
};

export type LoginResponse = LoginOutputDto;

export type LogoutResponse = unknown;

export type InitiatePasswordResetData = {
    requestBody: InititatePasswordResetInputDto;
};

export type InitiatePasswordResetResponse = GenericMessageDto;

export type CompletePasswordResetData = {
    requestBody: CompletePasswordResetInputDto;
};

export type CompletePasswordResetResponse = GenericMessageDto;

export type CompleteOnboardingData = {
    requestBody: CompleteUserOnboardingInputDto;
};

export type CompleteOnboardingResponse = GenericMessageDto;

export type LinkOauthAccountData = {
    requestBody: LinkOAuthAccountInputDto;
};

export type LinkOauthAccountResponse = GenericMessageDto;

export type GoogleResponse = unknown;

export type AuthControllerGoogleCallbackData = {
    state: string;
};

export type AuthControllerGoogleCallbackResponse = unknown;

export type MicrosoftResponse = unknown;

export type AuthControllerMicrosoftCallbackData = {
    state: string;
};

export type AuthControllerMicrosoftCallbackResponse = unknown;

export type FindManyUsersData = {
    page: number;
    recordsPerPage: number;
};

export type FindManyUsersResponse = ReadManyUserOutputDto;

export type CreateUserData = {
    requestBody: CreateUserInputDto;
};

export type CreateUserResponse = CreateUserOutputDto;

export type FindMeResponse = ReadUserMeOutputDto;

export type FindOneUserData = {
    userId: string;
};

export type FindOneUserResponse = ReadUserOutputDto;

export type UpdateUserData = {
    requestBody: UpdateUserInputDto;
    userId: string;
};

export type UpdateUserResponse = UpdateUserOutputDto;

export type DeleteUserData = {
    userId: string;
};

export type DeleteUserResponse = DeleteUserOutputDto;

export type FindOneUserByEmailData = {
    email: string;
};

export type FindOneUserByEmailResponse = ReadUserOutputDto;

export type ExportUsersResponse = string;

export type FindManySitesData = {
    page: number;
    recordsPerPage: number;
};

export type FindManySitesResponse = SiteOutputManyDto;

export type CreateSiteData = {
    requestBody: SiteInputDto;
};

export type CreateSiteResponse = SiteOutputDto;

export type SearchSitesData = {
    code: unknown;
};

export type SearchSitesResponse = Array<SiteOutputDto>;

export type FindOneSiteData = {
    id: string;
};

export type FindOneSiteResponse = SiteOutputDto;

export type UpdateSiteData = {
    id: string;
    requestBody: SiteInputDto;
};

export type UpdateSiteResponse = SiteOutputDto;

export type DeleteSiteData = {
    id: string;
};

export type DeleteSiteResponse = SiteOutputDto;

export type FindManyRoutesBySiteData = {
    id: string;
};

export type FindManyRoutesBySiteResponse = Array<ReadRouteOutputDto>;

export type FindManyOutagesBySiteData = {
    id: string;
};

export type FindManyOutagesBySiteResponse = Array<OutageOutputDto>;

export type ExportSitesResponse = string;

export type CreateOutageData = {
    requestBody: OutageInputDto;
};

export type CreateOutageResponse = OutageOutputDto;

export type FindManyOutagesData = {
    page: number;
    recordsPerPage: number;
};

export type FindManyOutagesResponse = OutageOutputManyDto;

export type FindManyPublicOutagesData = {
    page: number;
    recordsPerPage: number;
};

export type FindManyPublicOutagesResponse = OutageOutputManyDto;

export type GetOutageSummaryResponse = OutageSummaryOutputDto;

export type FindOneOutageData = {
    id: string;
};

export type FindOneOutageResponse = OutageOutputDto;

export type UpdateOutageData = {
    id: string;
    requestBody: OutageInputDto;
};

export type UpdateOutageResponse = OutageOutputDto;

export type DeleteOutageData = {
    id: string;
};

export type DeleteOutageResponse = OutageOutputDto;

export type FindOneOutageRenderEmailData = {
    id: string;
};

export type FindOneOutageRenderEmailResponse = EmailWebhookOutputDto;

export type HandleInboundEmailWebhookData = {
    requestBody: EmailWebhookInputDto;
};

export type HandleInboundEmailWebhookResponse = EmailWebhookOutputDto;

export type ExportOutagesResponse = string;

export type CreateOutageNoteData = {
    id: string;
    requestBody: NoteInputDto;
};

export type CreateOutageNoteResponse = NoteOutputDto;

export type UpdateOutageNoteData = {
    id: string;
    noteId: string;
    requestBody: NoteInputDto;
};

export type UpdateOutageNoteResponse = NoteOutputDto;

export type FindManyRoutesData = {
    page: number;
    recordsPerPage: number;
};

export type FindManyRoutesResponse = ReadManyRouteOutputDto;

export type CreateRouteData = {
    requestBody: CreateRouteInputDto;
};

export type CreateRouteResponse = CreateRouteOutputDto;

export type FindOneRouteData = {
    id: string;
};

export type FindOneRouteResponse = ReadRouteOutputDto;

export type UpdateRouteData = {
    id: string;
    requestBody: UpdateRouteInputDto;
};

export type UpdateRouteResponse = UpdateRouteOutputDto;

export type DeleteRouteData = {
    id: string;
};

export type DeleteRouteResponse = DeleteRouteOutputDto;

export type ExportRoutesResponse = string;

export type FindManyAssetsData = {
    page: number;
    recordsPerPage: number;
};

export type FindManyAssetsResponse = AssetOutputManyDto;

export type CreateAssetData = {
    requestBody: AssetInputDto;
};

export type CreateAssetResponse = AssetOutputDto;

export type SearchAssetsData = {
    name: unknown;
};

export type SearchAssetsResponse = Array<AssetOutputDto>;

export type FindOneAssetData = {
    id: string;
};

export type FindOneAssetResponse = AssetOutputDto;

export type UpdateAssetData = {
    id: string;
    requestBody: AssetInputDto;
};

export type UpdateAssetResponse = AssetOutputDto;

export type DeleteAssetData = {
    id: string;
};

export type DeleteAssetResponse = AssetOutputDto;

export type ExportAssetsResponse = string;

export type FindManyMapsData = {
    page: number;
    recordsPerPage: number;
};

export type FindManyMapsResponse = ReadManyMapOutputDto;

export type CreateMapData = {
    requestBody: CreateMapInputDto;
};

export type CreateMapResponse = CreateMapOutputDto;

export type FindDefaultMapResponse = ReadMapOutputDto;

export type FindOneMapData = {
    id: string;
};

export type FindOneMapResponse = ReadMapOutputDto;

export type UpdateMapData = {
    id: string;
    requestBody: UpdateMapInputDto;
};

export type UpdateMapResponse = UpdateMapOutputDto;

export type DeleteMapData = {
    id: string;
};

export type DeleteMapResponse = DeleteMapOutputDto;

export type ExportMapsResponse = string;

export type FindManyAlarmsData = {
    page: number;
    recordsPerPage: number;
};

export type FindManyAlarmsResponse = AlarmOutputManyDto;

export type CreateAlarmData = {
    requestBody: AlarmInputDto;
};

export type CreateAlarmResponse = AlarmOutputDto;

export type FindOneAlarmData = {
    id: string;
};

export type FindOneAlarmResponse = AlarmOutputDto;

export type UpdateAlarmData = {
    id: string;
    requestBody: AlarmInputDto;
};

export type UpdateAlarmResponse = AlarmOutputDto;

export type DeleteAlarmData = {
    id: string;
};

export type DeleteAlarmResponse = AlarmOutputDto;

export type ExportAlarmsResponse = string;

export type FindManyTagsData = {
    page: number;
    recordsPerPage: number;
};

export type FindManyTagsResponse = TagOutputManyDto;

export type CreateTagData = {
    requestBody: TagInputDto;
};

export type CreateTagResponse = TagOutputDto;

export type FindOneTagData = {
    id: string;
};

export type FindOneTagResponse = TagOutputDto;

export type UpdateTagData = {
    id: string;
    requestBody: TagInputDto;
};

export type UpdateTagResponse = TagOutputDto;

export type DeleteTagData = {
    id: string;
};

export type DeleteTagResponse = TagOutputDto;

export type ExportTagsResponse = string;

export type $OpenApiTs = {
    '/api/health': {
        get: {
            res: {
                /**
                 * The Health Check is successful
                 */
                200: {
                    status?: string;
                    info?: {
                        [key: string]: {
                            status: string;
                            [key: string]: unknown | string;
                        };
                    } | null;
                    error?: {
                        [key: string]: {
                            status: string;
                            [key: string]: unknown | string;
                        };
                    } | null;
                    details?: {
                        [key: string]: {
                            status: string;
                            [key: string]: unknown | string;
                        };
                    };
                };
                /**
                 * The Health Check is not successful
                 */
                503: {
                    status?: string;
                    info?: {
                        [key: string]: {
                            status: string;
                            [key: string]: unknown | string;
                        };
                    } | null;
                    error?: {
                        [key: string]: {
                            status: string;
                            [key: string]: unknown | string;
                        };
                    } | null;
                    details?: {
                        [key: string]: {
                            status: string;
                            [key: string]: unknown | string;
                        };
                    };
                };
            };
        };
    };
    '/api/auth/login': {
        post: {
            req: LoginData;
            res: {
                /**
                 * Success
                 */
                200: LoginOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/logout': {
        post: {
            res: {
                201: unknown;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/password-reset/initiate': {
        post: {
            req: InitiatePasswordResetData;
            res: {
                /**
                 * Success
                 */
                200: GenericMessageDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/password-reset/complete': {
        post: {
            req: CompletePasswordResetData;
            res: {
                /**
                 * Success
                 */
                200: GenericMessageDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/onboarding/complete': {
        post: {
            req: CompleteOnboardingData;
            res: {
                /**
                 * Success
                 */
                200: GenericMessageDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/link-account': {
        post: {
            req: LinkOauthAccountData;
            res: {
                /**
                 * Success
                 */
                200: GenericMessageDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/providers/google': {
        get: {
            res: {
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/providers/google/callback': {
        get: {
            req: AuthControllerGoogleCallbackData;
            res: {
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/providers/microsoft': {
        get: {
            res: {
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/auth/providers/microsoft/callback': {
        get: {
            req: AuthControllerMicrosoftCallbackData;
            res: {
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/users': {
        get: {
            req: FindManyUsersData;
            res: {
                /**
                 * Success
                 */
                200: ReadManyUserOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        post: {
            req: CreateUserData;
            res: {
                /**
                 * Success
                 */
                200: CreateUserOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/users/me': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: ReadUserMeOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/users/{userId}': {
        get: {
            req: FindOneUserData;
            res: {
                /**
                 * Success
                 */
                200: ReadUserOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        put: {
            req: UpdateUserData;
            res: {
                /**
                 * Success
                 */
                200: UpdateUserOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        delete: {
            req: DeleteUserData;
            res: {
                /**
                 * Success
                 */
                200: DeleteUserOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/users/email/{email}': {
        get: {
            req: FindOneUserByEmailData;
            res: {
                /**
                 * Success
                 */
                200: ReadUserOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/users/export': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: string;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/sites': {
        get: {
            req: FindManySitesData;
            res: {
                /**
                 * Success
                 */
                200: SiteOutputManyDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        post: {
            req: CreateSiteData;
            res: {
                /**
                 * Success
                 */
                200: SiteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/sites/search': {
        get: {
            req: SearchSitesData;
            res: {
                /**
                 * Success
                 */
                200: Array<SiteOutputDto>;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/sites/{id}': {
        get: {
            req: FindOneSiteData;
            res: {
                /**
                 * Success
                 */
                200: SiteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        put: {
            req: UpdateSiteData;
            res: {
                /**
                 * Success
                 */
                200: SiteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        delete: {
            req: DeleteSiteData;
            res: {
                /**
                 * Success
                 */
                200: SiteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/sites/{id}/routes': {
        get: {
            req: FindManyRoutesBySiteData;
            res: {
                /**
                 * Success
                 */
                200: Array<ReadRouteOutputDto>;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/sites/{id}/outages': {
        get: {
            req: FindManyOutagesBySiteData;
            res: {
                /**
                 * Success
                 */
                200: Array<OutageOutputDto>;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/sites/export': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: string;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages': {
        post: {
            req: CreateOutageData;
            res: {
                /**
                 * Success
                 */
                200: OutageOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        get: {
            req: FindManyOutagesData;
            res: {
                /**
                 * Success
                 */
                200: OutageOutputManyDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages/public': {
        get: {
            req: FindManyPublicOutagesData;
            res: {
                /**
                 * Success
                 */
                200: OutageOutputManyDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages/summary': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: OutageSummaryOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages/{id}': {
        get: {
            req: FindOneOutageData;
            res: {
                /**
                 * Success
                 */
                200: OutageOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        put: {
            req: UpdateOutageData;
            res: {
                /**
                 * Success
                 */
                200: OutageOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        delete: {
            req: DeleteOutageData;
            res: {
                /**
                 * Success
                 */
                200: OutageOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages/{id}/email/render': {
        get: {
            req: FindOneOutageRenderEmailData;
            res: {
                /**
                 * Success
                 */
                200: EmailWebhookOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages/email': {
        post: {
            req: HandleInboundEmailWebhookData;
            res: {
                /**
                 * Success
                 */
                200: EmailWebhookOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages/export': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: string;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages/{id}/notes': {
        post: {
            req: CreateOutageNoteData;
            res: {
                /**
                 * Success
                 */
                200: NoteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/outages/{id}/notes/{noteId}': {
        put: {
            req: UpdateOutageNoteData;
            res: {
                /**
                 * Success
                 */
                200: NoteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/routes': {
        get: {
            req: FindManyRoutesData;
            res: {
                /**
                 * Success
                 */
                200: ReadManyRouteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        post: {
            req: CreateRouteData;
            res: {
                /**
                 * Success
                 */
                200: CreateRouteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/routes/{id}': {
        get: {
            req: FindOneRouteData;
            res: {
                /**
                 * Success
                 */
                200: ReadRouteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        put: {
            req: UpdateRouteData;
            res: {
                /**
                 * Success
                 */
                200: UpdateRouteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        delete: {
            req: DeleteRouteData;
            res: {
                /**
                 * Success
                 */
                200: DeleteRouteOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/routes/export': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: string;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/assets': {
        get: {
            req: FindManyAssetsData;
            res: {
                /**
                 * Success
                 */
                200: AssetOutputManyDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        post: {
            req: CreateAssetData;
            res: {
                /**
                 * Success
                 */
                200: AssetOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/assets/search': {
        get: {
            req: SearchAssetsData;
            res: {
                /**
                 * Success
                 */
                200: Array<AssetOutputDto>;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/assets/{id}': {
        get: {
            req: FindOneAssetData;
            res: {
                /**
                 * Success
                 */
                200: AssetOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        put: {
            req: UpdateAssetData;
            res: {
                /**
                 * Success
                 */
                200: AssetOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        delete: {
            req: DeleteAssetData;
            res: {
                /**
                 * Success
                 */
                200: AssetOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/assets/export': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: string;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/maps': {
        get: {
            req: FindManyMapsData;
            res: {
                /**
                 * Success
                 */
                200: ReadManyMapOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        post: {
            req: CreateMapData;
            res: {
                /**
                 * Success
                 */
                200: CreateMapOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/maps/default': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: ReadMapOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/maps/{id}': {
        get: {
            req: FindOneMapData;
            res: {
                /**
                 * Success
                 */
                200: ReadMapOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        put: {
            req: UpdateMapData;
            res: {
                /**
                 * Success
                 */
                200: UpdateMapOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        delete: {
            req: DeleteMapData;
            res: {
                /**
                 * Success
                 */
                200: DeleteMapOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/maps/export': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: string;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/alarms': {
        get: {
            req: FindManyAlarmsData;
            res: {
                /**
                 * Success
                 */
                200: AlarmOutputManyDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        post: {
            req: CreateAlarmData;
            res: {
                /**
                 * Success
                 */
                200: AlarmOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/alarms/{id}': {
        get: {
            req: FindOneAlarmData;
            res: {
                /**
                 * Success
                 */
                200: AlarmOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        put: {
            req: UpdateAlarmData;
            res: {
                /**
                 * Success
                 */
                200: AlarmOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        delete: {
            req: DeleteAlarmData;
            res: {
                /**
                 * Success
                 */
                200: AlarmOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/alarms/export': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: string;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/tags': {
        get: {
            req: FindManyTagsData;
            res: {
                /**
                 * Success
                 */
                200: TagOutputManyDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        post: {
            req: CreateTagData;
            res: {
                /**
                 * Success
                 */
                200: TagOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/tags/{id}': {
        get: {
            req: FindOneTagData;
            res: {
                /**
                 * Success
                 */
                200: TagOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        put: {
            req: UpdateTagData;
            res: {
                /**
                 * Success
                 */
                200: TagOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
        delete: {
            req: DeleteTagData;
            res: {
                /**
                 * Success
                 */
                200: TagOutputDto;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Not found
                 */
                404: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
    '/api/tags/export': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: string;
                /**
                 * Unauthorized
                 */
                401: ErrorDto;
                /**
                 * Forbidden
                 */
                403: ErrorDto;
                /**
                 * Internal Server Error
                 */
                500: ErrorDto;
            };
        };
    };
};