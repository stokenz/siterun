// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { HealthControllerCheckResponse, LoginData, LoginResponse, LogoutResponse, InitiatePasswordResetData, InitiatePasswordResetResponse, CompletePasswordResetData, CompletePasswordResetResponse, CompleteOnboardingData, CompleteOnboardingResponse, LinkOauthAccountData, LinkOauthAccountResponse, GoogleResponse, AuthControllerGoogleCallbackData, AuthControllerGoogleCallbackResponse, MicrosoftResponse, AuthControllerMicrosoftCallbackData, AuthControllerMicrosoftCallbackResponse, FindManyUsersData, FindManyUsersResponse, CreateUserData, CreateUserResponse, FindMeResponse, FindOneUserData, FindOneUserResponse, UpdateUserData, UpdateUserResponse, DeleteUserData, DeleteUserResponse, FindOneUserByEmailData, FindOneUserByEmailResponse, ExportUsersResponse, FindManySitesData, FindManySitesResponse, CreateSiteData, CreateSiteResponse, SearchSitesData, SearchSitesResponse, FindOneSiteData, FindOneSiteResponse, UpdateSiteData, UpdateSiteResponse, DeleteSiteData, DeleteSiteResponse, FindManyRoutesBySiteData, FindManyRoutesBySiteResponse, FindManyOutagesBySiteData, FindManyOutagesBySiteResponse, ExportSitesResponse, CreateOutageData, CreateOutageResponse, FindManyOutagesData, FindManyOutagesResponse, FindManyPublicOutagesData, FindManyPublicOutagesResponse, GetOutageSummaryResponse, FindOneOutageData, FindOneOutageResponse, UpdateOutageData, UpdateOutageResponse, DeleteOutageData, DeleteOutageResponse, FindOneOutageRenderEmailData, FindOneOutageRenderEmailResponse, HandleInboundEmailWebhookData, HandleInboundEmailWebhookResponse, ExportOutagesResponse, CreateOutageNoteData, CreateOutageNoteResponse, UpdateOutageNoteData, UpdateOutageNoteResponse, FindManyRoutesData, FindManyRoutesResponse, CreateRouteData, CreateRouteResponse, FindOneRouteData, FindOneRouteResponse, UpdateRouteData, UpdateRouteResponse, DeleteRouteData, DeleteRouteResponse, ExportRoutesResponse, FindManyAssetsData, FindManyAssetsResponse, CreateAssetData, CreateAssetResponse, SearchAssetsData, SearchAssetsResponse, FindOneAssetData, FindOneAssetResponse, UpdateAssetData, UpdateAssetResponse, DeleteAssetData, DeleteAssetResponse, ExportAssetsResponse, FindManyMapsData, FindManyMapsResponse, CreateMapData, CreateMapResponse, FindDefaultMapResponse, FindOneMapData, FindOneMapResponse, UpdateMapData, UpdateMapResponse, DeleteMapData, DeleteMapResponse, ExportMapsResponse, FindManyAlarmsData, FindManyAlarmsResponse, CreateAlarmData, CreateAlarmResponse, FindOneAlarmData, FindOneAlarmResponse, UpdateAlarmData, UpdateAlarmResponse, DeleteAlarmData, DeleteAlarmResponse, ExportAlarmsResponse, FindManyTagsData, FindManyTagsResponse, CreateTagData, CreateTagResponse, FindOneTagData, FindOneTagResponse, UpdateTagData, UpdateTagResponse, DeleteTagData, DeleteTagResponse, ExportTagsResponse } from './types.gen';

export class DefaultService {
    /**
     * @returns unknown The Health Check is successful
     * @throws ApiError
     */
    public static healthControllerCheck(): CancelablePromise<HealthControllerCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/health',
            errors: {
                503: 'The Health Check is not successful'
            }
        });
    }
    
}

export class AuthService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LoginOutputDto Success
     * @throws ApiError
     */
    public static login(data: LoginData): CancelablePromise<LoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static logout(): CancelablePromise<LogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/logout',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GenericMessageDto Success
     * @throws ApiError
     */
    public static initiatePasswordReset(data: InitiatePasswordResetData): CancelablePromise<InitiatePasswordResetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/password-reset/initiate',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GenericMessageDto Success
     * @throws ApiError
     */
    public static completePasswordReset(data: CompletePasswordResetData): CancelablePromise<CompletePasswordResetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/password-reset/complete',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GenericMessageDto Success
     * @throws ApiError
     */
    public static completeOnboarding(data: CompleteOnboardingData): CancelablePromise<CompleteOnboardingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/onboarding/complete',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GenericMessageDto Success
     * @throws ApiError
     */
    public static linkOauthAccount(data: LinkOauthAccountData): CancelablePromise<LinkOauthAccountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/link-account',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static google(): CancelablePromise<GoogleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/auth/providers/google',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.state
     * @returns unknown
     * @throws ApiError
     */
    public static authControllerGoogleCallback(data: AuthControllerGoogleCallbackData): CancelablePromise<AuthControllerGoogleCallbackResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/auth/providers/google/callback',
            query: {
                state: data.state
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static microsoft(): CancelablePromise<MicrosoftResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/auth/providers/microsoft',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.state
     * @returns unknown
     * @throws ApiError
     */
    public static authControllerMicrosoftCallback(data: AuthControllerMicrosoftCallbackData): CancelablePromise<AuthControllerMicrosoftCallbackResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/auth/providers/microsoft/callback',
            query: {
                state: data.state
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns ReadManyUserOutputDto Success
     * @throws ApiError
     */
    public static findManyUsers(data: FindManyUsersData): CancelablePromise<FindManyUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CreateUserOutputDto Success
     * @throws ApiError
     */
    public static createUser(data: CreateUserData): CancelablePromise<CreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns ReadUserMeOutputDto Success
     * @throws ApiError
     */
    public static findMe(): CancelablePromise<FindMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/me',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userId
     * @returns ReadUserOutputDto Success
     * @throws ApiError
     */
    public static findOneUser(data: FindOneUserData): CancelablePromise<FindOneUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/{userId}',
            path: {
                userId: data.userId
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UpdateUserOutputDto Success
     * @throws ApiError
     */
    public static updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/users/{userId}',
            path: {
                userId: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userId
     * @returns DeleteUserOutputDto Success
     * @throws ApiError
     */
    public static deleteUser(data: DeleteUserData): CancelablePromise<DeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/users/{userId}',
            path: {
                userId: data.userId
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.email
     * @returns ReadUserOutputDto Success
     * @throws ApiError
     */
    public static findOneUserByEmail(data: FindOneUserByEmailData): CancelablePromise<FindOneUserByEmailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/email/{email}',
            path: {
                email: data.email
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public static exportUsers(): CancelablePromise<ExportUsersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/users/export',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class SitesService {
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns SiteOutputManyDto Success
     * @throws ApiError
     */
    public static findManySites(data: FindManySitesData): CancelablePromise<FindManySitesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/sites',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SiteOutputDto Success
     * @throws ApiError
     */
    public static createSite(data: CreateSiteData): CancelablePromise<CreateSiteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/sites',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.code
     * @returns SiteOutputDto Success
     * @throws ApiError
     */
    public static searchSites(data: SearchSitesData): CancelablePromise<SearchSitesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/sites/search',
            query: {
                code: data.code
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns SiteOutputDto Success
     * @throws ApiError
     */
    public static findOneSite(data: FindOneSiteData): CancelablePromise<FindOneSiteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/sites/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns SiteOutputDto Success
     * @throws ApiError
     */
    public static updateSite(data: UpdateSiteData): CancelablePromise<UpdateSiteResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/sites/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns SiteOutputDto Success
     * @throws ApiError
     */
    public static deleteSite(data: DeleteSiteData): CancelablePromise<DeleteSiteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/sites/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ReadRouteOutputDto Success
     * @throws ApiError
     */
    public static findManyRoutesBySite(data: FindManyRoutesBySiteData): CancelablePromise<FindManyRoutesBySiteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/sites/{id}/routes',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns OutageOutputDto Success
     * @throws ApiError
     */
    public static findManyOutagesBySite(data: FindManyOutagesBySiteData): CancelablePromise<FindManyOutagesBySiteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/sites/{id}/outages',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public static exportSites(): CancelablePromise<ExportSitesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/sites/export',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class OutagesService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns OutageOutputDto Success
     * @throws ApiError
     */
    public static createOutage(data: CreateOutageData): CancelablePromise<CreateOutageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/outages',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns OutageOutputManyDto Success
     * @throws ApiError
     */
    public static findManyOutages(data: FindManyOutagesData): CancelablePromise<FindManyOutagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/outages',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns OutageOutputManyDto Success
     * @throws ApiError
     */
    public static findManyPublicOutages(data: FindManyPublicOutagesData): CancelablePromise<FindManyPublicOutagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/outages/public',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns OutageSummaryOutputDto Success
     * @throws ApiError
     */
    public static getOutageSummary(): CancelablePromise<GetOutageSummaryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/outages/summary',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns OutageOutputDto Success
     * @throws ApiError
     */
    public static findOneOutage(data: FindOneOutageData): CancelablePromise<FindOneOutageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/outages/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns OutageOutputDto Success
     * @throws ApiError
     */
    public static updateOutage(data: UpdateOutageData): CancelablePromise<UpdateOutageResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/outages/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns OutageOutputDto Success
     * @throws ApiError
     */
    public static deleteOutage(data: DeleteOutageData): CancelablePromise<DeleteOutageResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/outages/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns EmailWebhookOutputDto Success
     * @throws ApiError
     */
    public static findOneOutageRenderEmail(data: FindOneOutageRenderEmailData): CancelablePromise<FindOneOutageRenderEmailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/outages/{id}/email/render',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmailWebhookOutputDto Success
     * @throws ApiError
     */
    public static handleInboundEmailWebhook(data: HandleInboundEmailWebhookData): CancelablePromise<HandleInboundEmailWebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/outages/email',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public static exportOutages(): CancelablePromise<ExportOutagesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/outages/export',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns NoteOutputDto Success
     * @throws ApiError
     */
    public static createOutageNote(data: CreateOutageNoteData): CancelablePromise<CreateOutageNoteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/outages/{id}/notes',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.noteId
     * @param data.requestBody
     * @returns NoteOutputDto Success
     * @throws ApiError
     */
    public static updateOutageNote(data: UpdateOutageNoteData): CancelablePromise<UpdateOutageNoteResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/outages/{id}/notes/{noteId}',
            path: {
                id: data.id,
                noteId: data.noteId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class RoutesService {
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns ReadManyRouteOutputDto Success
     * @throws ApiError
     */
    public static findManyRoutes(data: FindManyRoutesData): CancelablePromise<FindManyRoutesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/routes',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CreateRouteOutputDto Success
     * @throws ApiError
     */
    public static createRoute(data: CreateRouteData): CancelablePromise<CreateRouteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/routes',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ReadRouteOutputDto Success
     * @throws ApiError
     */
    public static findOneRoute(data: FindOneRouteData): CancelablePromise<FindOneRouteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/routes/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns UpdateRouteOutputDto Success
     * @throws ApiError
     */
    public static updateRoute(data: UpdateRouteData): CancelablePromise<UpdateRouteResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/routes/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns DeleteRouteOutputDto Success
     * @throws ApiError
     */
    public static deleteRoute(data: DeleteRouteData): CancelablePromise<DeleteRouteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/routes/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public static exportRoutes(): CancelablePromise<ExportRoutesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/routes/export',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class AssetsService {
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns AssetOutputManyDto Success
     * @throws ApiError
     */
    public static findManyAssets(data: FindManyAssetsData): CancelablePromise<FindManyAssetsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/assets',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AssetOutputDto Success
     * @throws ApiError
     */
    public static createAsset(data: CreateAssetData): CancelablePromise<CreateAssetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/assets',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns AssetOutputDto Success
     * @throws ApiError
     */
    public static searchAssets(data: SearchAssetsData): CancelablePromise<SearchAssetsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/assets/search',
            query: {
                name: data.name
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns AssetOutputDto Success
     * @throws ApiError
     */
    public static findOneAsset(data: FindOneAssetData): CancelablePromise<FindOneAssetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/assets/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns AssetOutputDto Success
     * @throws ApiError
     */
    public static updateAsset(data: UpdateAssetData): CancelablePromise<UpdateAssetResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/assets/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns AssetOutputDto Success
     * @throws ApiError
     */
    public static deleteAsset(data: DeleteAssetData): CancelablePromise<DeleteAssetResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/assets/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public static exportAssets(): CancelablePromise<ExportAssetsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/assets/export',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class MapsService {
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns ReadManyMapOutputDto Success
     * @throws ApiError
     */
    public static findManyMaps(data: FindManyMapsData): CancelablePromise<FindManyMapsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/maps',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CreateMapOutputDto Success
     * @throws ApiError
     */
    public static createMap(data: CreateMapData): CancelablePromise<CreateMapResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/maps',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns ReadMapOutputDto Success
     * @throws ApiError
     */
    public static findDefaultMap(): CancelablePromise<FindDefaultMapResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/maps/default',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ReadMapOutputDto Success
     * @throws ApiError
     */
    public static findOneMap(data: FindOneMapData): CancelablePromise<FindOneMapResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/maps/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns UpdateMapOutputDto Success
     * @throws ApiError
     */
    public static updateMap(data: UpdateMapData): CancelablePromise<UpdateMapResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/maps/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns DeleteMapOutputDto Success
     * @throws ApiError
     */
    public static deleteMap(data: DeleteMapData): CancelablePromise<DeleteMapResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/maps/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public static exportMaps(): CancelablePromise<ExportMapsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/maps/export',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class AlarmsService {
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns AlarmOutputManyDto Success
     * @throws ApiError
     */
    public static findManyAlarms(data: FindManyAlarmsData): CancelablePromise<FindManyAlarmsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/alarms',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AlarmOutputDto Success
     * @throws ApiError
     */
    public static createAlarm(data: CreateAlarmData): CancelablePromise<CreateAlarmResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/alarms',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns AlarmOutputDto Success
     * @throws ApiError
     */
    public static findOneAlarm(data: FindOneAlarmData): CancelablePromise<FindOneAlarmResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/alarms/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns AlarmOutputDto Success
     * @throws ApiError
     */
    public static updateAlarm(data: UpdateAlarmData): CancelablePromise<UpdateAlarmResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/alarms/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns AlarmOutputDto Success
     * @throws ApiError
     */
    public static deleteAlarm(data: DeleteAlarmData): CancelablePromise<DeleteAlarmResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/alarms/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public static exportAlarms(): CancelablePromise<ExportAlarmsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/alarms/export',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class TagsService {
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.recordsPerPage
     * @returns TagOutputManyDto Success
     * @throws ApiError
     */
    public static findManyTags(data: FindManyTagsData): CancelablePromise<FindManyTagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tags',
            query: {
                page: data.page,
                recordsPerPage: data.recordsPerPage
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TagOutputDto Success
     * @throws ApiError
     */
    public static createTag(data: CreateTagData): CancelablePromise<CreateTagResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/tags',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns TagOutputDto Success
     * @throws ApiError
     */
    public static findOneTag(data: FindOneTagData): CancelablePromise<FindOneTagResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tags/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns TagOutputDto Success
     * @throws ApiError
     */
    public static updateTag(data: UpdateTagData): CancelablePromise<UpdateTagResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/tags/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns TagOutputDto Success
     * @throws ApiError
     */
    public static deleteTag(data: DeleteTagData): CancelablePromise<DeleteTagResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/tags/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public static exportTags(): CancelablePromise<ExportTagsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/tags/export',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Internal Server Error'
            }
        });
    }
    
}