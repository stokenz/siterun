// This file is auto-generated by @hey-api/openapi-ts

/**
 * Error response
 */
export type ErrorDto = {
  message: string;
};

/**
 * Login with email and password
 */
export type LoginInputDto = {
  email: string;
  password: string;
  source?: "mobile" | "web";
};

export type source = "mobile" | "web";

/**
 * Login with email and password
 */
export type LoginOutputDto = {
  message: string;
  redirect?: string;
  accessToken: string;
};

export type InititatePasswordResetInputDto = {
  email: string;
};

export type GenericMessageDto = {
  message: string;
};

export type CompletePasswordResetInputDto = {
  token: string;
  password: string;
};

export type CompleteUserOnboardingInputDto = {
  token: string;
  password: string;
};

export type LinkOAuthAccountInputDto = {
  token: string;
};

/**
 * Paginate User records
 */
export type UserOutputPageDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLat: number;
    addressLng: number;
    createdAt: string;
  }>;
};

/**
 * List of User records
 */
export type UserOutputManyDto = Array<{
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
  active: boolean;
  address: string;
  addressLat: number;
  addressLng: number;
  createdAt: string;
}>;

/**
 * User record
 */
export type UserMeOutputDto = {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
  active: boolean;
  address: string;
  addressLat: number;
  addressLng: number;
  createdAt: string;
  outageInboundEmailAddress: string;
  features: Array<string>;
};

/**
 * User record
 */
export type UserOutputDto = {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
  active: boolean;
  address: string;
  addressLat: number;
  addressLng: number;
  createdAt: string;
};

/**
 * User record
 */
export type UserInputDto = {
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
  active: boolean;
  address: string;
  addressLat: number;
  addressLng: number;
};

/**
 * Paginate Site records
 */
export type SiteOutputPageDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    code: string;
    name: string;
    longitude: number;
    latitude: number;
    tags: Array<{
      id: string;
      name: string;
      description: string;
      color: string;
      createdAt: string;
      updatedAt: string;
    }>;
    createdAt: string;
  }>;
};

/**
 * SiteGeoJSON record
 */
export type SiteGeoJSONDto = {
  type: "FeatureCollection";
  features: Array<{
    type: "Feature";
    properties: {
      id: string;
      code: string;
      name: string;
      tags: Array<string>;
    };
    geometry: {
      type: "Point";
      coordinates: unknown;
    };
  }>;
};

export type type = "FeatureCollection";

/**
 * Site record
 */
export type SiteOutputDto = {
  id: string;
  code: string;
  name: string;
  longitude: number;
  latitude: number;
  tags: Array<{
    id: string;
    name: string;
    description: string;
    color: string;
    createdAt: string;
    updatedAt: string;
  }>;
  createdAt: string;
};

/**
 * A route for a vehicle to follow between sites
 */
export type ReadRouteOutputDto = {
  id: string;
  name: string;
  distance: number;
  duration: number;
  returnDistance: number;
  returnDuration: number;
  assignee: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    address: string;
    addressLng: number;
    addressLat: number;
  } | null;
  loop: boolean;
  stops: Array<{
    id: string;
    distance: number;
    duration: number;
    siteId: string | null;
    site: {
      id: string;
      code: string;
      latitude: number;
      longitude: number;
    } | null;
    label: string;
    latitude: number;
    longitude: number;
  }>;
  createdAt: string;
};

/**
 * Outage record
 */
export type OutageOutputDto = {
  id: string;
  externalId: string | null;
  planned: boolean;
  plannedStart: string;
  plannedEnd: string;
  actualStart: string | null;
  actualEnd: string | null;
  estimatedEnd: string | null;
  status: "DRAFT" | "APPROVED" | "REJECTED";
  reason: string;
  physicalAddress: string;
  icp: string;
  createdAt: string;
  siteId: string | null;
  site: {
    id: string;
    code: string;
    name: string;
    longitude: number;
    latitude: number;
    createdAt: string;
  } | null;
  emailSource: {
    id: string;
    externalId: string;
    to: string;
    from: string;
    subject: string;
    textBody: string;
    htmlBody: string;
    sentAt: string;
    createdAt: string;
  } | null;
  emailId: string | null;
};

export type status = "DRAFT" | "APPROVED" | "REJECTED";

/**
 * Site record
 */
export type SiteInputDto = {
  code: string;
  name: string;
  longitude: number;
  latitude: number;
  tags: Array<string>;
};

/**
 * Outage record
 */
export type OutageInputDto = {
  externalId: string | null;
  planned: boolean;
  plannedStart: string;
  plannedEnd: string;
  actualStart: string | null;
  actualEnd: string | null;
  estimatedEnd: string | null;
  status: "DRAFT" | "APPROVED" | "REJECTED";
  reason: string;
  physicalAddress: string;
  icp: string;
  siteId: string | null;
  emailId: string | null;
};

/**
 * Paginate Outage records
 */
export type OutageOutputPageDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    externalId: string | null;
    planned: boolean;
    plannedStart: string;
    plannedEnd: string;
    actualStart: string | null;
    actualEnd: string | null;
    estimatedEnd: string | null;
    status: "DRAFT" | "APPROVED" | "REJECTED";
    reason: string;
    physicalAddress: string;
    icp: string;
    createdAt: string;
    siteId: string | null;
    site: {
      id: string;
      code: string;
      name: string;
      longitude: number;
      latitude: number;
      createdAt: string;
    } | null;
    emailSource: {
      id: string;
      externalId: string;
      to: string;
      from: string;
      subject: string;
      textBody: string;
      htmlBody: string;
      sentAt: string;
      createdAt: string;
    } | null;
    emailId: string | null;
  }>;
};

/**
 * Paginate PublicOutage records
 */
export type PublicOutageOutputPageDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    externalId: string;
    externalRef: string;
    planned: boolean;
    plannedStart: string;
    plannedEnd: string;
    altPlannedStart: string | null;
    altPlannedEnd: string | null;
    actualStart: string | null;
    actualEnd: string | null;
    estimatedEnd: string | null;
    reason: string;
    physicalAddress: string;
    provider: string;
    createdAt: string;
    updatedAt: string;
  }>;
};

/**
 * Outage Summary record
 */
export type OutageSummaryOutputDto = {
  draft: number;
  approved: number;
  rejected: number;
  upcoming24Hours: number;
  upcoming7Days: number;
  emails60Days: number;
};

/**
 * Public Outage record
 */
export type EmailWebhookOutputDto = {
  message: string;
};

/**
 * Public Outage record
 */
export type EmailWebhookInputDto = {
  FromName: string;
  MessageStream: string;
  From: string;
  FromFull: {
    Email: string;
    Name: string;
    MailboxHash: string;
  };
  To: string;
  ToFull: Array<{
    Email: string;
    Name: string;
    MailboxHash: string;
  }>;
  Cc: string;
  CcFull: Array<{
    Email: string;
    Name: string;
    MailboxHash: string;
  }>;
  Bcc: string;
  BccFull: Array<{
    Email: string;
    Name: string;
    MailboxHash: string;
  }>;
  OriginalRecipient: string;
  Subject: string;
  MessageID: string;
  ReplyTo: string;
  MailboxHash: string;
  Date: string;
  TextBody: string;
  HtmlBody: string;
  StrippedTextReply: string;
  Tag: string;
  Headers: Array<{
    Name: string;
    Value: string;
  }>;
  Attachments: Array<{
    Name: string;
    Content: string;
    ContentType: string;
    ContentLength: number;
  }>;
};

/**
 * Note record
 */
export type NoteInputDto = {
  text: string;
  userId: string;
};

/**
 * Note record
 */
export type NoteOutputDto = {
  id: string;
  text: string;
  user: {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    active: boolean;
    address: string;
    addressLat: number;
    addressLng: number;
    createdAt: string;
  };
  userId: string;
  createdAt: string;
  updatedAt: string;
};

/**
 * Paginate route records
 */
export type ReadManyRouteOutputDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    name: string;
    distance: number;
    duration: number;
    returnDistance: number;
    returnDuration: number;
    assignee: {
      id: string;
      firstName: string;
      lastName: string;
      email: string;
      address: string;
      addressLng: number;
      addressLat: number;
    } | null;
    loop: boolean;
    stops: Array<{
      id: string;
      distance: number;
      duration: number;
      siteId: string | null;
      site: {
        id: string;
        code: string;
        latitude: number;
        longitude: number;
      } | null;
      label: string;
      latitude: number;
      longitude: number;
    }>;
    createdAt: string;
  }>;
};

export type CreateRouteInputDto = {
  name: string;
  distance: number;
  duration: number;
  returnDistance: number;
  returnDuration: number;
  assignee:
    | {
        id: "null" | null;
        firstName: string;
        lastName: string;
        email: string;
        address: string;
        addressLng: number;
        addressLat: number;
      }
    | {
        id: string;
      }
    | null;
  loop: boolean;
  stops: Array<{
    id: string;
    distance: number;
    duration: number;
    siteId: string | null;
    label: string;
    latitude: number;
    longitude: number;
  }>;
};

export type id = "null";

export type CreateRouteOutputDto = {
  id: string;
  name: string;
  distance: number;
  duration: number;
  returnDistance: number;
  returnDuration: number;
  assignee: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    address: string;
    addressLng: number;
    addressLat: number;
  } | null;
  loop: boolean;
  stops: Array<{
    id: string;
    distance: number;
    duration: number;
    siteId: string | null;
    label: string;
    latitude: number;
    longitude: number;
  }>;
  createdAt: string;
};

export type UpdateRouteInputDto = {
  id: string;
  name: string;
  distance: number;
  duration: number;
  returnDistance: number;
  returnDuration: number;
  assignee:
    | {
        id: "null" | null;
        firstName: string;
        lastName: string;
        email: string;
        address: string;
        addressLng: number;
        addressLat: number;
      }
    | {
        id: string;
      }
    | null;
  loop: boolean;
  stops: Array<{
    id: string;
    distance: number;
    duration: number;
    siteId: string | null;
    label: string;
    latitude: number;
    longitude: number;
  }>;
};

/**
 * A route for a vehicle to follow between sites
 */
export type UpdateRouteOutputDto = {
  id: string;
  name: string;
  distance: number;
  duration: number;
  returnDistance: number;
  returnDuration: number;
  assignee: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    address: string;
    addressLng: number;
    addressLat: number;
  } | null;
  loop: boolean;
  stops: Array<{
    id: string;
    distance: number;
    duration: number;
    siteId: string | null;
    site: {
      id: string;
      code: string;
      latitude: number;
      longitude: number;
    } | null;
    label: string;
    latitude: number;
    longitude: number;
  }>;
  createdAt: string;
};

/**
 * A route for a vehicle to follow between sites
 */
export type DeleteRouteOutputDto = {
  id: string;
  name: string;
  distance: number;
  duration: number;
  returnDistance: number;
  returnDuration: number;
  assignee: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    address: string;
    addressLng: number;
    addressLat: number;
  } | null;
  loop: boolean;
  stops: Array<{
    id: string;
    distance: number;
    duration: number;
    siteId: string | null;
    site: {
      id: string;
      code: string;
      latitude: number;
      longitude: number;
    } | null;
    label: string;
    latitude: number;
    longitude: number;
  }>;
  createdAt: string;
};

/**
 * Paginate Device records
 */
export type DeviceOutputPageDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    name: string;
    siteId: string;
    site: {
      id: string;
      code: string;
      name: string;
      longitude: number;
      latitude: number;
      createdAt: string;
    };
    createdAt: string;
    ipAddress: string | null;
    port: number | null;
    username: string | null;
    password: string | null;
    protocol: "SNMP_V1" | "SNMP_V2C" | "SNMP_V3" | "MQTT_V5" | null;
    active: boolean;
  }>;
};

/**
 * List of Device records
 */
export type DeviceOutputManyDto = Array<{
  id: string;
  name: string;
  siteId: string;
  site: {
    id: string;
    code: string;
    name: string;
    longitude: number;
    latitude: number;
    createdAt: string;
  };
  createdAt: string;
  ipAddress: string | null;
  port: number | null;
  username: string | null;
  password: string | null;
  protocol: "SNMP_V1" | "SNMP_V2C" | "SNMP_V3" | "MQTT_V5" | null;
  active: boolean;
}>;

/**
 * Device record
 */
export type DeviceOutputDto = {
  id: string;
  name: string;
  siteId: string;
  site: {
    id: string;
    code: string;
    name: string;
    longitude: number;
    latitude: number;
    createdAt: string;
  };
  createdAt: string;
  ipAddress: string | null;
  port: number | null;
  username: string | null;
  password: string | null;
  protocol: "SNMP_V1" | "SNMP_V2C" | "SNMP_V3" | "MQTT_V5" | null;
  active: boolean;
};

export type protocol = "SNMP_V1" | "SNMP_V2C" | "SNMP_V3" | "MQTT_V5";

/**
 * Device record
 */
export type DeviceInputDto = {
  name: string;
  siteId: string;
  ipAddress: string | null;
  port: number | null;
  username: string | null;
  password: string | null;
  protocol: "SNMP_V1" | "SNMP_V2C" | "SNMP_V3" | "MQTT_V5" | null;
  active: boolean;
};

/**
 * Paginate Map records
 */
export type MapOutputPageDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    name: string;
    styleLight: string;
    styleDark: string;
    createdAt: string;
  }>;
};

/**
 * Map record
 */
export type MapOutputDto = {
  id: string;
  name: string;
  styleLight: string;
  styleDark: string;
  createdAt: string;
};

/**
 * Map record
 */
export type MapInputDto = {
  name: string;
  styleLight: string;
  styleDark: string;
};

/**
 * Paginate Alarm records
 */
export type AlarmOutputPageDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    name: string;
    description: string;
    severity: number;
    onAt: string;
    offAt: string | null;
    deviceId: string;
    device: {
      id: string;
      name: string;
      siteId: string;
      createdAt: string;
      ipAddress: string | null;
      port: number | null;
      username: string | null;
      password: string | null;
      protocol: "SNMP_V1" | "SNMP_V2C" | "SNMP_V3" | "MQTT_V5" | null;
      active: boolean;
    };
    createdAt: string;
  }>;
};

/**
 * Alarm record
 */
export type AlarmOutputDto = {
  id: string;
  name: string;
  description: string;
  severity: number;
  onAt: string;
  offAt: string | null;
  deviceId: string;
  device: {
    id: string;
    name: string;
    siteId: string;
    createdAt: string;
    ipAddress: string | null;
    port: number | null;
    username: string | null;
    password: string | null;
    protocol: "SNMP_V1" | "SNMP_V2C" | "SNMP_V3" | "MQTT_V5" | null;
    active: boolean;
  };
  createdAt: string;
};

/**
 * Alarm record
 */
export type AlarmInputDto = {
  name: string;
  description: string;
  severity: number;
  onAt: string;
  offAt: string | null;
  deviceId: string;
};

/**
 * Paginate Tag records
 */
export type TagOutputPageDto = {
  page?: unknown;
  recordsPerPage?: unknown;
  totalRecords: number;
  records: Array<{
    id: string;
    name: string;
    description: string;
    color: string;
    createdAt: string;
    updatedAt: string;
  }>;
};

/**
 * Tag record
 */
export type TagOutputDto = {
  id: string;
  name: string;
  description: string;
  color: string;
  createdAt: string;
  updatedAt: string;
};

/**
 * Tag record
 */
export type TagInputDto = {
  name: string;
  description: string;
  color: string;
};

/**
 * Metric record
 */
export type MetricOutputDto = {
  period: string | null;
  acVoltage: number | null;
  busVoltage: number | null;
  loadCurrent: number | null;
  rectifierCurrent: number | null;
  batteryCurrent: number | null;
  batteryTemperature: number | null;
  batteryRuntime: number | null;
  batteryPercentage: number | null;
  solarCurrent: number | null;
  solarPower: number | null;
  deviceId: string;
};

export type HealthControllerCheckResponse = {
  status?: string;
  info?: {
    [key: string]: {
      status: string;
      [key: string]: unknown | string;
    };
  } | null;
  error?: {
    [key: string]: {
      status: string;
      [key: string]: unknown | string;
    };
  } | null;
  details?: {
    [key: string]: {
      status: string;
      [key: string]: unknown | string;
    };
  };
};

export type LoginData = {
  requestBody: LoginInputDto;
};

export type LoginResponse = LoginOutputDto;

export type LogoutResponse = unknown;

export type InitiatePasswordResetData = {
  requestBody: InititatePasswordResetInputDto;
};

export type InitiatePasswordResetResponse = GenericMessageDto;

export type CompletePasswordResetData = {
  requestBody: CompletePasswordResetInputDto;
};

export type CompletePasswordResetResponse = GenericMessageDto;

export type CompleteOnboardingData = {
  requestBody: CompleteUserOnboardingInputDto;
};

export type CompleteOnboardingResponse = GenericMessageDto;

export type LinkOauthAccountData = {
  requestBody: LinkOAuthAccountInputDto;
};

export type LinkOauthAccountResponse = GenericMessageDto;

export type GoogleResponse = unknown;

export type AuthControllerGoogleCallbackData = {
  state: string;
};

export type AuthControllerGoogleCallbackResponse = unknown;

export type MicrosoftResponse = unknown;

export type AuthControllerMicrosoftCallbackData = {
  state: string;
};

export type AuthControllerMicrosoftCallbackResponse = unknown;

export type FindManyUsersData = {
  page: number;
  recordsPerPage: number;
};

export type FindManyUsersResponse = UserOutputPageDto;

export type CreateUserData = {
  requestBody: UserInputDto;
};

export type CreateUserResponse = UserOutputDto;

export type SearchUsersData = {
  q: string;
};

export type SearchUsersResponse = UserOutputManyDto;

export type FindMeResponse = UserMeOutputDto;

export type FindOneUserData = {
  userId: string;
};

export type FindOneUserResponse = UserOutputDto;

export type UpdateUserData = {
  requestBody: UserInputDto;
  userId: string;
};

export type UpdateUserResponse = UserOutputDto;

export type DeleteUserData = {
  userId: string;
};

export type DeleteUserResponse = UserOutputDto;

export type FindOneUserByEmailData = {
  email: string;
};

export type FindOneUserByEmailResponse = UserOutputDto;

export type ExportUsersResponse = string;

export type FindManySitesData = {
  page: number;
  recordsPerPage: number;
};

export type FindManySitesResponse = SiteOutputPageDto;

export type CreateSiteData = {
  requestBody: SiteInputDto;
};

export type CreateSiteResponse = SiteOutputDto;

export type FindManySitesGeoJsonResponse = SiteGeoJSONDto;

export type SearchSitesData = {
  q: string;
};

export type SearchSitesResponse = Array<SiteOutputDto>;

export type FindOneSiteData = {
  id: string;
};

export type FindOneSiteResponse = SiteOutputDto;

export type UpdateSiteData = {
  id: string;
  requestBody: SiteInputDto;
};

export type UpdateSiteResponse = SiteOutputDto;

export type DeleteSiteData = {
  id: string;
};

export type DeleteSiteResponse = SiteOutputDto;

export type FindManyRoutesBySiteData = {
  id: string;
};

export type FindManyRoutesBySiteResponse = Array<ReadRouteOutputDto>;

export type FindManyOutagesBySiteData = {
  id: string;
};

export type FindManyOutagesBySiteResponse = Array<OutageOutputDto>;

export type ExportSitesResponse = string;

export type CreateOutageData = {
  requestBody: OutageInputDto;
};

export type CreateOutageResponse = OutageOutputDto;

export type FindManyOutagesData = {
  page: number;
  recordsPerPage: number;
};

export type FindManyOutagesResponse = OutageOutputPageDto;

export type FindManyPublicOutagesData = {
  page: number;
  recordsPerPage: number;
};

export type FindManyPublicOutagesResponse = PublicOutageOutputPageDto;

export type GetOutageSummaryResponse = OutageSummaryOutputDto;

export type FindOneOutageData = {
  id: string;
};

export type FindOneOutageResponse = OutageOutputDto;

export type UpdateOutageData = {
  id: string;
  requestBody: OutageInputDto;
};

export type UpdateOutageResponse = OutageOutputDto;

export type DeleteOutageData = {
  id: string;
};

export type DeleteOutageResponse = OutageOutputDto;

export type FindOneOutageRenderEmailData = {
  id: string;
};

export type FindOneOutageRenderEmailResponse = EmailWebhookOutputDto;

export type HandleInboundEmailWebhookData = {
  requestBody: EmailWebhookInputDto;
};

export type HandleInboundEmailWebhookResponse = EmailWebhookOutputDto;

export type ExportOutagesResponse = string;

export type CreateOutageNoteData = {
  id: string;
  requestBody: NoteInputDto;
};

export type CreateOutageNoteResponse = NoteOutputDto;

export type UpdateOutageNoteData = {
  id: string;
  noteId: string;
  requestBody: NoteInputDto;
};

export type UpdateOutageNoteResponse = NoteOutputDto;

export type FindManyRoutesData = {
  page: number;
  recordsPerPage: number;
};

export type FindManyRoutesResponse = ReadManyRouteOutputDto;

export type CreateRouteData = {
  requestBody: CreateRouteInputDto;
};

export type CreateRouteResponse = CreateRouteOutputDto;

export type FindOneRouteData = {
  id: string;
};

export type FindOneRouteResponse = ReadRouteOutputDto;

export type UpdateRouteData = {
  id: string;
  requestBody: UpdateRouteInputDto;
};

export type UpdateRouteResponse = UpdateRouteOutputDto;

export type DeleteRouteData = {
  id: string;
};

export type DeleteRouteResponse = DeleteRouteOutputDto;

export type ExportRoutesResponse = string;

export type FindManyDevicesForCollectorData = {
  page: number;
  recordsPerPage: number;
};

export type FindManyDevicesForCollectorResponse = DeviceOutputManyDto;

export type CreateDeviceData = {
  requestBody: DeviceInputDto;
};

export type CreateDeviceResponse = DeviceOutputDto;

export type SearchDevicesData = {
  name: unknown;
};

export type SearchDevicesResponse = Array<DeviceOutputDto>;

export type FindOneDeviceData = {
  id: string;
};

export type FindOneDeviceResponse = DeviceOutputDto;

export type UpdateDeviceData = {
  id: string;
  requestBody: DeviceInputDto;
};

export type UpdateDeviceResponse = DeviceOutputDto;

export type DeleteDeviceData = {
  id: string;
};

export type DeleteDeviceResponse = DeviceOutputDto;

export type ExportDevicesResponse = string;

export type FindManyMapsData = {
  page: number;
  recordsPerPage: number;
};

export type FindManyMapsResponse = MapOutputPageDto;

export type CreateMapData = {
  requestBody: MapInputDto;
};

export type CreateMapResponse = MapOutputDto;

export type FindDefaultMapResponse = MapOutputDto;

export type FindOneMapData = {
  id: string;
};

export type FindOneMapResponse = MapOutputDto;

export type UpdateMapData = {
  id: string;
  requestBody: MapInputDto;
};

export type UpdateMapResponse = MapOutputDto;

export type DeleteMapData = {
  id: string;
};

export type DeleteMapResponse = MapOutputDto;

export type ExportMapsResponse = string;

export type FindManyAlarmsData = {
  page: number;
  recordsPerPage: number;
};

export type FindManyAlarmsResponse = AlarmOutputPageDto;

export type CreateAlarmData = {
  requestBody: AlarmInputDto;
};

export type CreateAlarmResponse = AlarmOutputDto;

export type FindOneAlarmData = {
  id: string;
};

export type FindOneAlarmResponse = AlarmOutputDto;

export type UpdateAlarmData = {
  id: string;
  requestBody: AlarmInputDto;
};

export type UpdateAlarmResponse = AlarmOutputDto;

export type DeleteAlarmData = {
  id: string;
};

export type DeleteAlarmResponse = AlarmOutputDto;

export type ExportAlarmsResponse = string;

export type FindManyTagsData = {
  page: number;
  recordsPerPage: number;
};

export type FindManyTagsResponse = TagOutputPageDto;

export type CreateTagData = {
  requestBody: TagInputDto;
};

export type CreateTagResponse = TagOutputDto;

export type FindOneTagData = {
  id: string;
};

export type FindOneTagResponse = TagOutputDto;

export type UpdateTagData = {
  id: string;
  requestBody: TagInputDto;
};

export type UpdateTagResponse = TagOutputDto;

export type DeleteTagData = {
  id: string;
};

export type DeleteTagResponse = TagOutputDto;

export type ExportTagsResponse = string;

export type FindManyMetricsData = {
  deviceId: string;
  endTime: string;
  interval: string;
  startTime: string;
};

export type FindManyMetricsResponse = Array<MetricOutputDto>;

export type $OpenApiTs = {
  "/api/health": {
    get: {
      res: {
        /**
         * The Health Check is successful
         */
        200: {
          status?: string;
          info?: {
            [key: string]: {
              status: string;
              [key: string]: unknown | string;
            };
          } | null;
          error?: {
            [key: string]: {
              status: string;
              [key: string]: unknown | string;
            };
          } | null;
          details?: {
            [key: string]: {
              status: string;
              [key: string]: unknown | string;
            };
          };
        };
        /**
         * The Health Check is not successful
         */
        503: {
          status?: string;
          info?: {
            [key: string]: {
              status: string;
              [key: string]: unknown | string;
            };
          } | null;
          error?: {
            [key: string]: {
              status: string;
              [key: string]: unknown | string;
            };
          } | null;
          details?: {
            [key: string]: {
              status: string;
              [key: string]: unknown | string;
            };
          };
        };
      };
    };
  };
  "/api/auth/login": {
    post: {
      req: LoginData;
      res: {
        /**
         * Success
         */
        200: LoginOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/logout": {
    post: {
      res: {
        201: unknown;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/password-reset/initiate": {
    post: {
      req: InitiatePasswordResetData;
      res: {
        /**
         * Success
         */
        200: GenericMessageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/password-reset/complete": {
    post: {
      req: CompletePasswordResetData;
      res: {
        /**
         * Success
         */
        200: GenericMessageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/onboarding/complete": {
    post: {
      req: CompleteOnboardingData;
      res: {
        /**
         * Success
         */
        200: GenericMessageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/link-account": {
    post: {
      req: LinkOauthAccountData;
      res: {
        /**
         * Success
         */
        200: GenericMessageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/providers/google": {
    get: {
      res: {
        200: unknown;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/providers/google/callback": {
    get: {
      req: AuthControllerGoogleCallbackData;
      res: {
        200: unknown;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/providers/microsoft": {
    get: {
      res: {
        200: unknown;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/auth/providers/microsoft/callback": {
    get: {
      req: AuthControllerMicrosoftCallbackData;
      res: {
        200: unknown;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/users": {
    get: {
      req: FindManyUsersData;
      res: {
        /**
         * Success
         */
        200: UserOutputPageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    post: {
      req: CreateUserData;
      res: {
        /**
         * Success
         */
        200: UserOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/users/search": {
    get: {
      req: SearchUsersData;
      res: {
        /**
         * Success
         */
        200: UserOutputManyDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/users/me": {
    get: {
      res: {
        /**
         * Success
         */
        200: UserMeOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/users/{userId}": {
    get: {
      req: FindOneUserData;
      res: {
        /**
         * Success
         */
        200: UserOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    put: {
      req: UpdateUserData;
      res: {
        /**
         * Success
         */
        200: UserOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    delete: {
      req: DeleteUserData;
      res: {
        /**
         * Success
         */
        200: UserOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/users/email/{email}": {
    get: {
      req: FindOneUserByEmailData;
      res: {
        /**
         * Success
         */
        200: UserOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/users/export": {
    post: {
      res: {
        /**
         * Success
         */
        200: string;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/sites": {
    get: {
      req: FindManySitesData;
      res: {
        /**
         * Success
         */
        200: SiteOutputPageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    post: {
      req: CreateSiteData;
      res: {
        /**
         * Success
         */
        200: SiteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/sites/geojson": {
    get: {
      res: {
        /**
         * Success
         */
        200: SiteGeoJSONDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/sites/search": {
    get: {
      req: SearchSitesData;
      res: {
        /**
         * Success
         */
        200: Array<SiteOutputDto>;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/sites/{id}": {
    get: {
      req: FindOneSiteData;
      res: {
        /**
         * Success
         */
        200: SiteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    put: {
      req: UpdateSiteData;
      res: {
        /**
         * Success
         */
        200: SiteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    delete: {
      req: DeleteSiteData;
      res: {
        /**
         * Success
         */
        200: SiteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/sites/{id}/routes": {
    get: {
      req: FindManyRoutesBySiteData;
      res: {
        /**
         * Success
         */
        200: Array<ReadRouteOutputDto>;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/sites/{id}/outages": {
    get: {
      req: FindManyOutagesBySiteData;
      res: {
        /**
         * Success
         */
        200: Array<OutageOutputDto>;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/sites/export": {
    post: {
      res: {
        /**
         * Success
         */
        200: string;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages": {
    post: {
      req: CreateOutageData;
      res: {
        /**
         * Success
         */
        200: OutageOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    get: {
      req: FindManyOutagesData;
      res: {
        /**
         * Success
         */
        200: OutageOutputPageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages/public": {
    get: {
      req: FindManyPublicOutagesData;
      res: {
        /**
         * Success
         */
        200: PublicOutageOutputPageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages/summary": {
    get: {
      res: {
        /**
         * Success
         */
        200: OutageSummaryOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages/{id}": {
    get: {
      req: FindOneOutageData;
      res: {
        /**
         * Success
         */
        200: OutageOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    put: {
      req: UpdateOutageData;
      res: {
        /**
         * Success
         */
        200: OutageOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    delete: {
      req: DeleteOutageData;
      res: {
        /**
         * Success
         */
        200: OutageOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages/{id}/email/render": {
    get: {
      req: FindOneOutageRenderEmailData;
      res: {
        /**
         * Success
         */
        200: EmailWebhookOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages/email": {
    post: {
      req: HandleInboundEmailWebhookData;
      res: {
        /**
         * Success
         */
        200: EmailWebhookOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages/export": {
    post: {
      res: {
        /**
         * Success
         */
        200: string;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages/{id}/notes": {
    post: {
      req: CreateOutageNoteData;
      res: {
        /**
         * Success
         */
        200: NoteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/outages/{id}/notes/{noteId}": {
    put: {
      req: UpdateOutageNoteData;
      res: {
        /**
         * Success
         */
        200: NoteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/routes": {
    get: {
      req: FindManyRoutesData;
      res: {
        /**
         * Success
         */
        200: ReadManyRouteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    post: {
      req: CreateRouteData;
      res: {
        /**
         * Success
         */
        200: CreateRouteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/routes/{id}": {
    get: {
      req: FindOneRouteData;
      res: {
        /**
         * Success
         */
        200: ReadRouteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    put: {
      req: UpdateRouteData;
      res: {
        /**
         * Success
         */
        200: UpdateRouteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    delete: {
      req: DeleteRouteData;
      res: {
        /**
         * Success
         */
        200: DeleteRouteOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/routes/export": {
    post: {
      res: {
        /**
         * Success
         */
        200: string;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/devices": {
    get: {
      req: FindManyDevicesForCollectorData;
      res: {
        /**
         * Success
         */
        200: DeviceOutputManyDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    post: {
      req: CreateDeviceData;
      res: {
        /**
         * Success
         */
        200: DeviceOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/devices/search": {
    get: {
      req: SearchDevicesData;
      res: {
        /**
         * Success
         */
        200: Array<DeviceOutputDto>;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/devices/{id}": {
    get: {
      req: FindOneDeviceData;
      res: {
        /**
         * Success
         */
        200: DeviceOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    put: {
      req: UpdateDeviceData;
      res: {
        /**
         * Success
         */
        200: DeviceOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    delete: {
      req: DeleteDeviceData;
      res: {
        /**
         * Success
         */
        200: DeviceOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/devices/export": {
    post: {
      res: {
        /**
         * Success
         */
        200: string;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/maps": {
    get: {
      req: FindManyMapsData;
      res: {
        /**
         * Success
         */
        200: MapOutputPageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    post: {
      req: CreateMapData;
      res: {
        /**
         * Success
         */
        200: MapOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/maps/default": {
    get: {
      res: {
        /**
         * Success
         */
        200: MapOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/maps/{id}": {
    get: {
      req: FindOneMapData;
      res: {
        /**
         * Success
         */
        200: MapOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    put: {
      req: UpdateMapData;
      res: {
        /**
         * Success
         */
        200: MapOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    delete: {
      req: DeleteMapData;
      res: {
        /**
         * Success
         */
        200: MapOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/maps/export": {
    post: {
      res: {
        /**
         * Success
         */
        200: string;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/alarms": {
    get: {
      req: FindManyAlarmsData;
      res: {
        /**
         * Success
         */
        200: AlarmOutputPageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    post: {
      req: CreateAlarmData;
      res: {
        /**
         * Success
         */
        200: AlarmOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/alarms/{id}": {
    get: {
      req: FindOneAlarmData;
      res: {
        /**
         * Success
         */
        200: AlarmOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    put: {
      req: UpdateAlarmData;
      res: {
        /**
         * Success
         */
        200: AlarmOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    delete: {
      req: DeleteAlarmData;
      res: {
        /**
         * Success
         */
        200: AlarmOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/alarms/export": {
    post: {
      res: {
        /**
         * Success
         */
        200: string;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/tags": {
    get: {
      req: FindManyTagsData;
      res: {
        /**
         * Success
         */
        200: TagOutputPageDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    post: {
      req: CreateTagData;
      res: {
        /**
         * Success
         */
        200: TagOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/tags/{id}": {
    get: {
      req: FindOneTagData;
      res: {
        /**
         * Success
         */
        200: TagOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    put: {
      req: UpdateTagData;
      res: {
        /**
         * Success
         */
        200: TagOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
    delete: {
      req: DeleteTagData;
      res: {
        /**
         * Success
         */
        200: TagOutputDto;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Not found
         */
        404: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/tags/export": {
    post: {
      res: {
        /**
         * Success
         */
        200: string;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
  "/api/metrics": {
    get: {
      req: FindManyMetricsData;
      res: {
        /**
         * Success
         */
        200: Array<MetricOutputDto>;
        /**
         * Unauthorized
         */
        401: ErrorDto;
        /**
         * Forbidden
         */
        403: ErrorDto;
        /**
         * Internal Server Error
         */
        500: ErrorDto;
      };
    };
  };
};
