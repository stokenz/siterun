/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SignInImport } from "./routes/sign-in";
import { Route as AuthImport } from "./routes/_auth";
import { Route as ResetPasswordIndexImport } from "./routes/reset-password.index";
import { Route as AuthIndexImport } from "./routes/_auth/index";
import { Route as ResetPasswordTokenImport } from "./routes/reset-password.$token";
import { Route as OnboardingTokenImport } from "./routes/onboarding.$token";
import { Route as LinkAccountTokenImport } from "./routes/link-account.$token";
import { Route as AuthMapsDefaultImport } from "./routes/_auth/maps.default";
import { Route as AuthMapsDefaultModalImport } from "./routes/_auth/maps.default._modal";
import { Route as AuthMapsDefaultModalSitesSiteIdImport } from "./routes/_auth/maps.default._modal.sites.$siteId";

// Create/Update Routes

const SignInRoute = SignInImport.update({
  id: "/sign-in",
  path: "/sign-in",
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const ResetPasswordIndexRoute = ResetPasswordIndexImport.update({
  id: "/reset-password/",
  path: "/reset-password/",
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthRoute,
} as any);

const ResetPasswordTokenRoute = ResetPasswordTokenImport.update({
  id: "/reset-password/$token",
  path: "/reset-password/$token",
  getParentRoute: () => rootRoute,
} as any);

const OnboardingTokenRoute = OnboardingTokenImport.update({
  id: "/onboarding/$token",
  path: "/onboarding/$token",
  getParentRoute: () => rootRoute,
} as any);

const LinkAccountTokenRoute = LinkAccountTokenImport.update({
  id: "/link-account/$token",
  path: "/link-account/$token",
  getParentRoute: () => rootRoute,
} as any);

const AuthMapsDefaultRoute = AuthMapsDefaultImport.update({
  id: "/maps/default",
  path: "/maps/default",
  getParentRoute: () => AuthRoute,
} as any);

const AuthMapsDefaultModalRoute = AuthMapsDefaultModalImport.update({
  id: "/_modal",
  getParentRoute: () => AuthMapsDefaultRoute,
} as any);

const AuthMapsDefaultModalSitesSiteIdRoute =
  AuthMapsDefaultModalSitesSiteIdImport.update({
    id: "/sites/$siteId",
    path: "/sites/$siteId",
    getParentRoute: () => AuthMapsDefaultModalRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    "/sign-in": {
      id: "/sign-in";
      path: "/sign-in";
      fullPath: "/sign-in";
      preLoaderRoute: typeof SignInImport;
      parentRoute: typeof rootRoute;
    };
    "/link-account/$token": {
      id: "/link-account/$token";
      path: "/link-account/$token";
      fullPath: "/link-account/$token";
      preLoaderRoute: typeof LinkAccountTokenImport;
      parentRoute: typeof rootRoute;
    };
    "/onboarding/$token": {
      id: "/onboarding/$token";
      path: "/onboarding/$token";
      fullPath: "/onboarding/$token";
      preLoaderRoute: typeof OnboardingTokenImport;
      parentRoute: typeof rootRoute;
    };
    "/reset-password/$token": {
      id: "/reset-password/$token";
      path: "/reset-password/$token";
      fullPath: "/reset-password/$token";
      preLoaderRoute: typeof ResetPasswordTokenImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/": {
      id: "/_auth/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof AuthImport;
    };
    "/reset-password/": {
      id: "/reset-password/";
      path: "/reset-password";
      fullPath: "/reset-password";
      preLoaderRoute: typeof ResetPasswordIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/maps/default": {
      id: "/_auth/maps/default";
      path: "/maps/default";
      fullPath: "/maps/default";
      preLoaderRoute: typeof AuthMapsDefaultImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/maps/default/_modal": {
      id: "/_auth/maps/default/_modal";
      path: "";
      fullPath: "/maps/default";
      preLoaderRoute: typeof AuthMapsDefaultModalImport;
      parentRoute: typeof AuthMapsDefaultImport;
    };
    "/_auth/maps/default/_modal/sites/$siteId": {
      id: "/_auth/maps/default/_modal/sites/$siteId";
      path: "/sites/$siteId";
      fullPath: "/maps/default/sites/$siteId";
      preLoaderRoute: typeof AuthMapsDefaultModalSitesSiteIdImport;
      parentRoute: typeof AuthMapsDefaultModalImport;
    };
  }
}

// Create and export the route tree

interface AuthMapsDefaultModalRouteChildren {
  AuthMapsDefaultModalSitesSiteIdRoute: typeof AuthMapsDefaultModalSitesSiteIdRoute;
}

const AuthMapsDefaultModalRouteChildren: AuthMapsDefaultModalRouteChildren = {
  AuthMapsDefaultModalSitesSiteIdRoute: AuthMapsDefaultModalSitesSiteIdRoute,
};

const AuthMapsDefaultModalRouteWithChildren =
  AuthMapsDefaultModalRoute._addFileChildren(AuthMapsDefaultModalRouteChildren);

interface AuthMapsDefaultRouteChildren {
  AuthMapsDefaultModalRoute: typeof AuthMapsDefaultModalRouteWithChildren;
}

const AuthMapsDefaultRouteChildren: AuthMapsDefaultRouteChildren = {
  AuthMapsDefaultModalRoute: AuthMapsDefaultModalRouteWithChildren,
};

const AuthMapsDefaultRouteWithChildren = AuthMapsDefaultRoute._addFileChildren(
  AuthMapsDefaultRouteChildren,
);

interface AuthRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute;
  AuthMapsDefaultRoute: typeof AuthMapsDefaultRouteWithChildren;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
  AuthMapsDefaultRoute: AuthMapsDefaultRouteWithChildren,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  "": typeof AuthRouteWithChildren;
  "/sign-in": typeof SignInRoute;
  "/link-account/$token": typeof LinkAccountTokenRoute;
  "/onboarding/$token": typeof OnboardingTokenRoute;
  "/reset-password/$token": typeof ResetPasswordTokenRoute;
  "/": typeof AuthIndexRoute;
  "/reset-password": typeof ResetPasswordIndexRoute;
  "/maps/default": typeof AuthMapsDefaultModalRouteWithChildren;
  "/maps/default/sites/$siteId": typeof AuthMapsDefaultModalSitesSiteIdRoute;
}

export interface FileRoutesByTo {
  "/sign-in": typeof SignInRoute;
  "/link-account/$token": typeof LinkAccountTokenRoute;
  "/onboarding/$token": typeof OnboardingTokenRoute;
  "/reset-password/$token": typeof ResetPasswordTokenRoute;
  "/": typeof AuthIndexRoute;
  "/reset-password": typeof ResetPasswordIndexRoute;
  "/maps/default": typeof AuthMapsDefaultModalRouteWithChildren;
  "/maps/default/sites/$siteId": typeof AuthMapsDefaultModalSitesSiteIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_auth": typeof AuthRouteWithChildren;
  "/sign-in": typeof SignInRoute;
  "/link-account/$token": typeof LinkAccountTokenRoute;
  "/onboarding/$token": typeof OnboardingTokenRoute;
  "/reset-password/$token": typeof ResetPasswordTokenRoute;
  "/_auth/": typeof AuthIndexRoute;
  "/reset-password/": typeof ResetPasswordIndexRoute;
  "/_auth/maps/default": typeof AuthMapsDefaultRouteWithChildren;
  "/_auth/maps/default/_modal": typeof AuthMapsDefaultModalRouteWithChildren;
  "/_auth/maps/default/_modal/sites/$siteId": typeof AuthMapsDefaultModalSitesSiteIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/sign-in"
    | "/link-account/$token"
    | "/onboarding/$token"
    | "/reset-password/$token"
    | "/"
    | "/reset-password"
    | "/maps/default"
    | "/maps/default/sites/$siteId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/sign-in"
    | "/link-account/$token"
    | "/onboarding/$token"
    | "/reset-password/$token"
    | "/"
    | "/reset-password"
    | "/maps/default"
    | "/maps/default/sites/$siteId";
  id:
    | "__root__"
    | "/_auth"
    | "/sign-in"
    | "/link-account/$token"
    | "/onboarding/$token"
    | "/reset-password/$token"
    | "/_auth/"
    | "/reset-password/"
    | "/_auth/maps/default"
    | "/_auth/maps/default/_modal"
    | "/_auth/maps/default/_modal/sites/$siteId";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren;
  SignInRoute: typeof SignInRoute;
  LinkAccountTokenRoute: typeof LinkAccountTokenRoute;
  OnboardingTokenRoute: typeof OnboardingTokenRoute;
  ResetPasswordTokenRoute: typeof ResetPasswordTokenRoute;
  ResetPasswordIndexRoute: typeof ResetPasswordIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  SignInRoute: SignInRoute,
  LinkAccountTokenRoute: LinkAccountTokenRoute,
  OnboardingTokenRoute: OnboardingTokenRoute,
  ResetPasswordTokenRoute: ResetPasswordTokenRoute,
  ResetPasswordIndexRoute: ResetPasswordIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/sign-in",
        "/link-account/$token",
        "/onboarding/$token",
        "/reset-password/$token",
        "/reset-password/"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/",
        "/_auth/maps/default"
      ]
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/link-account/$token": {
      "filePath": "link-account.$token.tsx"
    },
    "/onboarding/$token": {
      "filePath": "onboarding.$token.tsx"
    },
    "/reset-password/$token": {
      "filePath": "reset-password.$token.tsx"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/reset-password/": {
      "filePath": "reset-password.index.tsx"
    },
    "/_auth/maps/default": {
      "filePath": "_auth/maps.default.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/maps/default/_modal"
      ]
    },
    "/_auth/maps/default/_modal": {
      "filePath": "_auth/maps.default._modal.tsx",
      "parent": "/_auth/maps/default",
      "children": [
        "/_auth/maps/default/_modal/sites/$siteId"
      ]
    },
    "/_auth/maps/default/_modal/sites/$siteId": {
      "filePath": "_auth/maps.default._modal.sites.$siteId.tsx",
      "parent": "/_auth/maps/default/_modal"
    }
  }
}
ROUTE_MANIFEST_END */
