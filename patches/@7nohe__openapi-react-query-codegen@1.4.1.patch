diff --git a/dist/createUseMutation.mjs b/dist/createUseMutation.mjs
index d3efc5c3cf90031848f69a73f9575ecfc6591ac8..71233f833a04e1e9e808ff49832d0f74702562a5 100644
--- a/dist/createUseMutation.mjs
+++ b/dist/createUseMutation.mjs
@@ -30,7 +30,7 @@ export const createUseMutation = ({ className, method, jsDoc, }) => {
     const exportHook = ts.factory.createVariableStatement([ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)], ts.factory.createVariableDeclarationList([
         ts.factory.createVariableDeclaration(ts.factory.createIdentifier(`use${className}${capitalizeFirstLetter(methodName)}`), undefined, undefined, ts.factory.createArrowFunction(undefined, ts.factory.createNodeArray([
             responseDataType,
-            ts.factory.createTypeParameterDeclaration(undefined, TError, undefined, ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)),
+            ts.factory.createTypeParameterDeclaration(undefined, TError, undefined, ts.factory.createTypeReferenceNode("ErrorDto")),
             ts.factory.createTypeParameterDeclaration(undefined, TContext, undefined, ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)),
         ]), [
             ts.factory.createParameterDeclaration(undefined, undefined, ts.factory.createIdentifier("options"), ts.factory.createToken(ts.SyntaxKind.QuestionToken), ts.factory.createTypeReferenceNode(ts.factory.createIdentifier("Omit"), [
diff --git a/dist/createUseQuery.mjs b/dist/createUseQuery.mjs
index acf5a7116b1e4acd2ced1db25802f3360df6a94a..cacfd310c5ade8a505d3a1966994965845ef9fbf 100644
--- a/dist/createUseQuery.mjs
+++ b/dist/createUseQuery.mjs
@@ -55,12 +55,12 @@ export function getRequestParamFromMethod(method) {
 /**
  * Return Type
  *
- * export const classNameMethodNameQueryResult<TData = MyClassMethodDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
+ * export const classNameMethodNameQueryResult<TData = MyClassMethodDefaultResponse, TError = ErrorDto> = UseQueryResult<TData, TError>;
  */
 export function createReturnTypeExport({ className, methodName, defaultApiResponse, }) {
     return ts.factory.createTypeAliasDeclaration([ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)], ts.factory.createIdentifier(`${capitalizeFirstLetter(className)}${capitalizeFirstLetter(methodName)}QueryResult`), [
         ts.factory.createTypeParameterDeclaration(undefined, TData, undefined, ts.factory.createTypeReferenceNode(defaultApiResponse.name)),
-        ts.factory.createTypeParameterDeclaration(undefined, TError, undefined, ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)),
+        ts.factory.createTypeParameterDeclaration(undefined, TError, undefined, ts.factory.createTypeReferenceNode("ErrorDto")),
     ], ts.factory.createTypeReferenceNode(ts.factory.createIdentifier("UseQueryResult"), [
         ts.factory.createTypeReferenceNode(TData),
         ts.factory.createTypeReferenceNode(TError),
@@ -95,7 +95,7 @@ export function createQueryHook({ queryString, suffix, responseDataType, request
     const hookExport = ts.factory.createVariableStatement([ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)], ts.factory.createVariableDeclarationList([
         ts.factory.createVariableDeclaration(ts.factory.createIdentifier(`${customHookName}${suffix}`), undefined, undefined, ts.factory.createArrowFunction(undefined, ts.factory.createNodeArray([
             responseDataType,
-            ts.factory.createTypeParameterDeclaration(undefined, TError, undefined, ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)),
+            ts.factory.createTypeParameterDeclaration(undefined, TError, undefined, ts.factory.createTypeReferenceNode("ErrorDto")),
             ts.factory.createTypeParameterDeclaration(undefined, "TQueryKey", queryKeyConstraint, ts.factory.createArrayTypeNode(ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword))),
         ]), [
             ...requestParams,
